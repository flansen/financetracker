apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    signingConfigs {
        release
    }
    lintOptions {
        abortOnError false
    }
    compileSdkVersion toolVersions.compileSdk
    buildToolsVersion toolVersions.buildTools
    defaultConfig {
        applicationId "flhan.de.financemanager"
        minSdkVersion toolVersions.minSdk
        targetSdkVersion toolVersions.compileSdk
        versionCode 12
        versionName "0.1.12"
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "environment"
    productFlavors {
        production {
            resValue "string", "app_name", "FinanceBuddy"
        }
        development {
            resValue "string", "app_name", "FinanceBuddyDebug"
            applicationIdSuffix ".development"
        }
    }

    configurations.all { final config ->
        if (config.name.contains('UnitTest') || config.name.contains('AndroidTest')) {
            config.resolutionStrategy.eachDependency { final details ->
                if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                    details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Support Libs
    implementation "com.android.support:appcompat-v7:$libVersions.androidSupport"
    implementation "com.android.support:design:$libVersions.androidSupport"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$toolVersions.kotlin"

    // RX
    implementation "io.reactivex.rxjava2:rxandroid:$libVersions.rxAndroid"
    implementation "io.reactivex.rxjava2:rxkotlin:$libVersions.rxkotlin"

    // Firebase
    implementation "com.google.firebase:firebase-auth:$libVersions.firebase"
    implementation "com.google.firebase:firebase-core:$libVersions.firebase"
    implementation "com.google.firebase:firebase-database:$libVersions.firebase"
    implementation "com.google.android.gms:play-services-auth:$libVersions.firebase"
    implementation "com.google.firebase:firebase-messaging:$libVersions.firebase"

    // Dagger
    implementation "com.google.dagger:dagger:$libVersions.dagger"
    kapt "com.google.dagger:dagger-compiler:$libVersions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$libVersions.dagger"
    implementation "com.google.dagger:dagger-android-support:$libVersions.dagger"

    // Architecture Components
    implementation "android.arch.lifecycle:extensions:$libVersions.archComponentsLC"
    testImplementation "android.arch.core:core-testing:$libVersions.archComponents"
    implementation "android.arch.lifecycle:reactivestreams:$libVersions.archComponentsLC"

    // UI
    implementation "com.amulyakhare:com.amulyakhare.textdrawable:$libVersions.textdrawable"

    // Butterknife
    implementation "com.jakewharton:butterknife:$libVersions.butterknife"
    kapt "com.jakewharton:butterknife-compiler:$libVersions.butterknife"

    // Leak Canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$libVersions.leakCanary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$libVersions.leakCanary"

    // Util
    implementation "androidx.core:core-ktx:$libVersions.ktx"

    // Test
    testImplementation "junit:junit:$libVersions.jUnit"
    testImplementation "org.mockito:mockito-core:$libVersions.mockito"
    testImplementation "com.nhaarman:mockito-kotlin:$libVersions.mockitoKotlin"

}

apply plugin: 'com.google.gms.google-services'

final Properties props = new Properties()
final def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
